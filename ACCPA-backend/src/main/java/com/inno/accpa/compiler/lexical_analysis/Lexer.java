// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: lexer.flex

package com.inno.accpa.compiler.lexical_analysis;

import com.inno.accpa.compiler.lexical_analysis.tokens.EvalToken;
import com.inno.accpa.compiler.lexical_analysis.tokens.IdentifierToken;
import com.inno.accpa.compiler.lexical_analysis.tokens.Token;
import com.inno.accpa.compiler.lexical_analysis.tokens.arithmetic_function.DivideToken;
import com.inno.accpa.compiler.lexical_analysis.tokens.arithmetic_function.MinusToken;
import com.inno.accpa.compiler.lexical_analysis.tokens.arithmetic_function.PlusToken;
import com.inno.accpa.compiler.lexical_analysis.tokens.arithmetic_function.TimesToken;
import com.inno.accpa.compiler.lexical_analysis.tokens.comparison.*;
import com.inno.accpa.compiler.lexical_analysis.tokens.keyword.*;
import com.inno.accpa.compiler.lexical_analysis.tokens.literal.BooleanLiteralToken;
import com.inno.accpa.compiler.lexical_analysis.tokens.literal.IntegerNumberLiteralToken;
import com.inno.accpa.compiler.lexical_analysis.tokens.literal.NullLiteralToken;
import com.inno.accpa.compiler.lexical_analysis.tokens.literal.RealNumberLiteralToken;
import com.inno.accpa.compiler.lexical_analysis.tokens.logical_operator.AndToken;
import com.inno.accpa.compiler.lexical_analysis.tokens.logical_operator.NotToken;
import com.inno.accpa.compiler.lexical_analysis.tokens.logical_operator.OrToken;
import com.inno.accpa.compiler.lexical_analysis.tokens.logical_operator.XorToken;
import com.inno.accpa.compiler.lexical_analysis.tokens.operation_on_lists.ConsToken;
import com.inno.accpa.compiler.lexical_analysis.tokens.operation_on_lists.HeadToken;
import com.inno.accpa.compiler.lexical_analysis.tokens.operation_on_lists.TailToken;
import com.inno.accpa.compiler.lexical_analysis.tokens.parenthesis.CloseParenthesisToken;
import com.inno.accpa.compiler.lexical_analysis.tokens.parenthesis.OpenParenthesisToken;
import com.inno.accpa.compiler.lexical_analysis.tokens.predicate.*;

import java.lang.reflect.InvocationTargetException;
import java.util.ArrayList;
import java.util.List;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class Lexer {

    /**
     * This character denotes the end of file.
     */
    public static final int YYEOF = -1;
    // Lexical states.
    public static final int YYINITIAL = 0;
    /**
     * Initial size of the lookahead buffer.
     */
    private static final int ZZ_BUFFERSIZE = 16384;
    /**
     * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
     * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
     * at the beginning of a line
     * l is of the form l = 2*k, k a non negative integer
     */
    private static final int ZZ_LEXSTATE[] = {
            0, 0
    };
    private static final String ZZ_CMAP_TOP_PACKED_0 =
            "\1\0\u10ff\u0100";
    /**
     * Top-level table for translating characters to character classes
     */
    private static final int[] ZZ_CMAP_TOP = zzUnpackcmap_top();
    private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
            "\11\0\1\1\1\2\1\0\1\1\1\3\22\0\1\1" +
                    "\6\0\1\4\1\5\1\6\1\7\2\0\1\10\1\11" +
                    "\1\0\12\12\1\0\1\13\5\0\32\14\6\0\1\15" +
                    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25" +
                    "\1\14\1\26\1\27\1\30\1\31\1\32\1\33\1\34" +
                    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\2\14" +
                    "\u0185\0";
    /**
     * Second-level tables for translating characters to character classes
     */
    private static final int[] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();
    private static final String ZZ_ACTION_PACKED_0 =
            "\1\0\1\1\1\2\2\3\1\4\1\5\1\6\1\1" +
                    "\1\7\1\10\25\11\1\7\1\12\1\0\20\11\1\13" +
                    "\12\11\1\14\1\15\23\11\1\16\12\11\1\17\1\11" +
                    "\1\20\1\21\2\11\1\22\1\23\1\11\1\24\7\11" +
                    "\1\25\2\11\1\26\1\27\1\30\2\11\1\31\1\32" +
                    "\1\11\1\33\1\11\1\34\1\11\1\35\3\11\1\36" +
                    "\5\11\1\37\1\11\1\40\1\11\1\41\1\42\1\43" +
                    "\1\11\1\44\1\45\1\46\1\47\1\50\1\51\1\52" +
                    "\1\11\1\53\1\54\2\11\1\55\1\56";
    /**
     * Translates DFA states to action switch labels.
     */
    private static final int[] ZZ_ACTION = zzUnpackAction();
    private static final String ZZ_ROWMAP_PACKED_0 =
            "\0\0\0\44\0\44\0\44\0\110\0\44\0\44\0\44" +
                    "\0\154\0\220\0\44\0\264\0\330\0\374\0\u0120\0\u0144" +
                    "\0\u0168\0\u018c\0\u01b0\0\u01d4\0\u01f8\0\u021c\0\u0240\0\u0264" +
                    "\0\u0288\0\u02ac\0\u02d0\0\u02f4\0\u0318\0\u033c\0\u0360\0\u0384" +
                    "\0\u03a8\0\u03cc\0\u03f0\0\u0414\0\u0438\0\u045c\0\u0480\0\u04a4" +
                    "\0\u04c8\0\u04ec\0\u0510\0\u0534\0\u0558\0\u057c\0\u05a0\0\u05c4" +
                    "\0\u05e8\0\u060c\0\u0630\0\264\0\u0654\0\u0678\0\u069c\0\u06c0" +
                    "\0\u06e4\0\u0708\0\u072c\0\u0750\0\u0774\0\u0798\0\u03f0\0\264" +
                    "\0\u07bc\0\u07e0\0\u0804\0\u0828\0\u084c\0\u0870\0\u0894\0\u08b8" +
                    "\0\u08dc\0\u0900\0\u0924\0\u0948\0\u096c\0\u0990\0\u09b4\0\u09d8" +
                    "\0\u09fc\0\u0a20\0\u0a44\0\264\0\u0a68\0\u0a8c\0\u0ab0\0\u0ad4" +
                    "\0\u0af8\0\u0b1c\0\u0b40\0\u0b64\0\u0b88\0\u0bac\0\264\0\u0bd0" +
                    "\0\264\0\264\0\u0bf4\0\u0c18\0\264\0\264\0\u0c3c\0\264" +
                    "\0\u0c60\0\u0c84\0\u0ca8\0\u0ccc\0\u0cf0\0\u0d14\0\u0d38\0\u0d5c" +
                    "\0\u0d80\0\u0da4\0\264\0\264\0\264\0\u0dc8\0\u0dec\0\264" +
                    "\0\264\0\u0e10\0\264\0\u0e34\0\264\0\u0e58\0\264\0\u0e7c" +
                    "\0\u0ea0\0\u0ec4\0\264\0\u0ee8\0\u0f0c\0\u0f30\0\u0f54\0\u0f78" +
                    "\0\264\0\u0f9c\0\264\0\u0fc0\0\264\0\264\0\264\0\u0fe4" +
                    "\0\264\0\264\0\264\0\264\0\264\0\264\0\264\0\u1008" +
                    "\0\264\0\u102c\0\u1050\0\u1074\0\264\0\264";
    /**
     * Translates a state to a row index in the transition table
     */
    private static final int[] ZZ_ROWMAP = zzUnpackRowMap();
    private static final String ZZ_TRANS_PACKED_0 =
            "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\2" +
                    "\1\11\1\2\1\12\1\13\1\14\1\15\1\16\1\17" +
                    "\1\20\1\21\1\22\1\23\1\24\1\25\1\14\1\26" +
                    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36" +
                    "\2\14\1\37\1\40\46\0\1\4\53\0\1\41\40\0" +
                    "\1\42\1\0\1\43\1\12\1\0\30\42\7\0\1\14" +
                    "\2\0\1\14\1\0\30\14\7\0\1\14\2\0\1\14" +
                    "\1\0\15\14\1\44\12\14\7\0\1\14\2\0\1\14" +
                    "\1\0\21\14\1\45\6\14\7\0\1\14\2\0\1\14" +
                    "\1\0\16\14\1\46\11\14\7\0\1\14\2\0\1\14" +
                    "\1\0\11\14\1\47\16\14\7\0\1\14\2\0\1\14" +
                    "\1\0\20\14\1\50\4\14\1\51\2\14\7\0\1\14" +
                    "\2\0\1\14\1\0\1\14\1\52\22\14\1\53\3\14" +
                    "\7\0\1\14\2\0\1\14\1\0\21\14\1\54\6\14" +
                    "\7\0\1\14\2\0\1\14\1\0\5\14\1\55\22\14" +
                    "\7\0\1\14\2\0\1\14\1\0\22\14\1\56\5\14" +
                    "\7\0\1\14\2\0\1\14\1\0\1\14\1\57\3\14" +
                    "\1\60\22\14\7\0\1\14\2\0\1\14\1\0\11\14" +
                    "\1\61\16\14\7\0\1\14\2\0\1\14\1\0\16\14" +
                    "\1\62\5\14\1\63\3\14\7\0\1\14\2\0\1\14" +
                    "\1\0\21\14\1\64\6\14\7\0\1\14\2\0\1\14" +
                    "\1\0\13\14\1\65\5\14\1\66\6\14\7\0\1\14" +
                    "\2\0\1\14\1\0\24\14\1\67\3\14\7\0\1\14" +
                    "\2\0\1\14\1\0\5\14\1\70\22\14\7\0\1\14" +
                    "\2\0\1\14\1\0\5\14\1\71\22\14\7\0\1\14" +
                    "\2\0\1\14\1\0\1\14\1\72\7\14\1\73\7\14" +
                    "\1\74\6\14\7\0\1\14\2\0\1\14\1\0\10\14" +
                    "\1\75\17\14\7\0\1\14\2\0\1\14\1\0\16\14" +
                    "\1\76\11\14\11\0\1\43\1\41\40\0\1\42\2\0" +
                    "\1\42\1\0\30\42\12\0\1\77\40\0\1\14\2\0" +
                    "\1\14\1\0\4\14\1\100\23\14\7\0\1\14\2\0" +
                    "\1\14\1\0\5\14\1\101\22\14\7\0\1\14\2\0" +
                    "\1\14\1\0\15\14\1\102\12\14\7\0\1\14\2\0" +
                    "\1\14\1\0\25\14\1\103\2\14\7\0\1\14\2\0" +
                    "\1\14\1\0\24\14\1\104\3\14\7\0\1\14\2\0" +
                    "\1\14\1\0\1\14\1\105\26\14\7\0\1\14\2\0" +
                    "\1\14\1\0\13\14\1\106\14\14\7\0\1\14\2\0" +
                    "\1\14\1\0\15\14\1\107\12\14\7\0\1\14\2\0" +
                    "\1\14\1\0\5\14\1\110\22\14\7\0\1\14\2\0" +
                    "\1\14\1\0\1\14\1\111\26\14\7\0\1\14\2\0" +
                    "\1\14\1\0\1\14\1\112\1\113\6\14\1\114\1\14" +
                    "\1\115\1\14\1\116\3\14\1\117\6\14\7\0\1\14" +
                    "\2\0\1\14\1\0\14\14\1\120\13\14\7\0\1\14" +
                    "\2\0\1\14\1\0\22\14\1\121\5\14\7\0\1\14" +
                    "\2\0\1\14\1\0\15\14\1\122\12\14\7\0\1\14" +
                    "\2\0\1\14\1\0\15\14\1\123\5\14\1\124\4\14" +
                    "\7\0\1\14\2\0\1\14\1\0\13\14\1\125\14\14" +
                    "\7\0\1\14\2\0\1\14\1\0\24\14\1\126\3\14" +
                    "\7\0\1\14\2\0\1\14\1\0\16\14\1\127\11\14" +
                    "\7\0\1\14\2\0\1\14\1\0\16\14\1\130\11\14" +
                    "\7\0\1\14\2\0\1\14\1\0\23\14\1\131\4\14" +
                    "\7\0\1\14\2\0\1\14\1\0\23\14\1\132\4\14" +
                    "\7\0\1\14\2\0\1\14\1\0\11\14\1\133\16\14" +
                    "\7\0\1\14\2\0\1\14\1\0\14\14\1\134\13\14" +
                    "\7\0\1\14\2\0\1\14\1\0\24\14\1\135\3\14" +
                    "\7\0\1\14\2\0\1\14\1\0\11\14\1\136\16\14" +
                    "\7\0\1\14\2\0\1\14\1\0\21\14\1\137\6\14" +
                    "\7\0\1\14\2\0\1\14\1\0\1\14\1\140\26\14" +
                    "\7\0\1\14\2\0\1\14\1\0\4\14\1\141\15\14" +
                    "\1\142\5\14\7\0\1\14\2\0\1\14\1\0\11\14" +
                    "\1\143\16\14\7\0\1\14\2\0\1\14\1\0\1\14" +
                    "\1\144\26\14\7\0\1\14\2\0\1\14\1\0\13\14" +
                    "\1\145\14\14\7\0\1\14\2\0\1\14\1\0\22\14" +
                    "\1\135\5\14\7\0\1\14\2\0\1\14\1\0\3\14" +
                    "\1\146\24\14\7\0\1\14\2\0\1\14\1\0\1\14" +
                    "\1\147\26\14\7\0\1\14\2\0\1\14\1\0\4\14" +
                    "\1\150\23\14\7\0\1\14\2\0\1\14\1\0\23\14" +
                    "\1\151\4\14\7\0\1\14\2\0\1\14\1\0\16\14" +
                    "\1\152\11\14\7\0\1\14\2\0\1\14\1\0\15\14" +
                    "\1\153\12\14\7\0\1\14\2\0\1\14\1\0\11\14" +
                    "\1\154\16\14\7\0\1\14\2\0\1\14\1\0\24\14" +
                    "\1\155\3\14\7\0\1\14\2\0\1\14\1\0\5\14" +
                    "\1\156\22\14\7\0\1\14\2\0\1\14\1\0\2\14" +
                    "\1\157\25\14\7\0\1\14\2\0\1\14\1\0\22\14" +
                    "\1\160\5\14\7\0\1\14\2\0\1\14\1\0\24\14" +
                    "\1\161\3\14\7\0\1\14\2\0\1\14\1\0\5\14" +
                    "\1\162\22\14\7\0\1\14\2\0\1\14\1\0\13\14" +
                    "\1\163\14\14\7\0\1\14\2\0\1\14\1\0\22\14" +
                    "\1\164\5\14\7\0\1\14\2\0\1\14\1\0\7\14" +
                    "\1\165\20\14\7\0\1\14\2\0\1\14\1\0\23\14" +
                    "\1\166\4\14\7\0\1\14\2\0\1\14\1\0\24\14" +
                    "\1\167\3\14\7\0\1\14\2\0\1\14\1\0\20\14" +
                    "\1\170\7\14\7\0\1\14\2\0\1\14\1\0\13\14" +
                    "\1\171\14\14\7\0\1\14\2\0\1\14\1\0\5\14" +
                    "\1\172\22\14\7\0\1\14\2\0\1\14\1\0\5\14" +
                    "\1\173\22\14\7\0\1\14\2\0\1\14\1\0\13\14" +
                    "\1\174\14\14\7\0\1\14\2\0\1\14\1\0\12\14" +
                    "\1\175\15\14\7\0\1\14\2\0\1\14\1\0\4\14" +
                    "\1\176\23\14\7\0\1\14\2\0\1\14\1\0\13\14" +
                    "\1\177\14\14\7\0\1\14\2\0\1\14\1\0\23\14" +
                    "\1\200\4\14\7\0\1\14\2\0\1\14\1\0\16\14" +
                    "\1\201\11\14\7\0\1\14\2\0\1\14\1\0\16\14" +
                    "\1\202\11\14\7\0\1\14\2\0\1\14\1\0\23\14" +
                    "\1\203\4\14\7\0\1\14\2\0\1\14\1\0\22\14" +
                    "\1\204\5\14\7\0\1\14\2\0\1\14\1\0\13\14" +
                    "\1\205\14\14\7\0\1\14\2\0\1\14\1\0\1\14" +
                    "\1\206\26\14\7\0\1\14\2\0\1\14\1\0\4\14" +
                    "\1\207\23\14\7\0\1\14\2\0\1\14\1\0\5\14" +
                    "\1\210\22\14\7\0\1\14\2\0\1\14\1\0\22\14" +
                    "\1\211\5\14\7\0\1\14\2\0\1\14\1\0\20\14" +
                    "\1\212\7\14\7\0\1\14\2\0\1\14\1\0\5\14" +
                    "\1\213\22\14\7\0\1\14\2\0\1\14\1\0\21\14" +
                    "\1\214\6\14\7\0\1\14\2\0\1\14\1\0\22\14" +
                    "\1\215\5\14\7\0\1\14\2\0\1\14\1\0\5\14" +
                    "\1\216\22\14\7\0\1\14\2\0\1\14\1\0\5\14" +
                    "\1\217\22\14\7\0\1\14\2\0\1\14\1\0\5\14" +
                    "\1\220\22\14\7\0\1\14\2\0\1\14\1\0\14\14" +
                    "\1\221\13\14\7\0\1\14\2\0\1\14\1\0\13\14" +
                    "\1\222\14\14\7\0\1\14\2\0\1\14\1\0\23\14" +
                    "\1\223\4\14\7\0\1\14\2\0\1\14\1\0\13\14" +
                    "\1\224\14\14\7\0\1\14\2\0\1\14\1\0\13\14" +
                    "\1\225\14\14\7\0\1\14\2\0\1\14\1\0\1\14" +
                    "\1\226\26\14\7\0\1\14\2\0\1\14\1\0\20\14" +
                    "\1\227\7\14\7\0\1\14\2\0\1\14\1\0\24\14" +
                    "\1\230\3\14\7\0\1\14\2\0\1\14\1\0\15\14" +
                    "\1\231\12\14\7\0\1\14\2\0\1\14\1\0\21\14" +
                    "\1\232\6\14\7\0\1\14\2\0\1\14\1\0\1\14" +
                    "\1\233\26\14\7\0\1\14\2\0\1\14\1\0\5\14" +
                    "\1\234\22\14\7\0\1\14\2\0\1\14\1\0\13\14" +
                    "\1\235\14\14\7\0\1\14\2\0\1\14\1\0\20\14" +
                    "\1\236\7\14";
    /**
     * The transition table of the DFA
     */
    private static final int[] ZZ_TRANS = zzUnpackTrans();
    /**
     * Error code for "Unknown internal scanner error".
     */
    private static final int ZZ_UNKNOWN_ERROR = 0;
    /**
     * Error code for "could not match input".
     */
    private static final int ZZ_NO_MATCH = 1;
    /**
     * Error code for "pushback value was too large".
     */
    private static final int ZZ_PUSHBACK_2BIG = 2;
    /**
     * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
     * {@link #ZZ_PUSHBACK_2BIG} respectively.
     */
    private static final String ZZ_ERROR_MSG[] = {
            "Unknown internal scanner error",
            "Error: could not match input",
            "Error: pushback value was too large"
    };
    private static final String ZZ_ATTRIBUTE_PACKED_0 =
            "\1\0\3\11\1\1\3\11\2\1\1\11\27\1\1\0" +
                    "\173\1";
    /**
     * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
     */
    private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();
    /* user code: */
    List<Token> tokens = new ArrayList<>();
    boolean isCommentLine = false;
    /**
     * Input device.
     */
    private java.io.Reader zzReader;
    /**
     * Current state of the DFA.
     */
    private int zzState;
    /**
     * Current lexical state.
     */
    private int zzLexicalState = YYINITIAL;
    /**
     * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
     * string.
     */
    private char zzBuffer[] = new char[ZZ_BUFFERSIZE];
    /**
     * Text position at the last accepting state.
     */
    private int zzMarkedPos;
    /**
     * Current text position in the buffer.
     */
    private int zzCurrentPos;
    /**
     * Marks the beginning of the {@link #yytext()} string in the buffer.
     */
    private int zzStartRead;
    /**
     * Marks the last character in the buffer, that has been read from input.
     */
    private int zzEndRead;
    /**
     * Whether the scanner is at the end of file.
     *
     * @see #yyatEOF
     */
    private boolean zzAtEOF;
    /**
     * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
     *
     * <p>When a lead/high surrogate has been read from the input stream into the final
     * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
     */
    private int zzFinalHighSurrogate = 0;
    /**
     * Number of newlines encountered up to the start of the matched text.
     */
    private int yyline;
    /**
     * Number of characters from the last newline up to the start of the matched text.
     */
    private int yycolumn;
    /**
     * Number of characters up to the start of the matched text.
     */
    @SuppressWarnings("unused")
    private long yychar;
    /**
     * Whether the scanner is currently at the beginning of a line.
     */
    @SuppressWarnings("unused")
    private boolean zzAtBOL = true;
    /**
     * Whether the user-EOF-code has already been executed.
     */
    @SuppressWarnings("unused")
    private boolean zzEOFDone;

    /**
     * Creates a new scanner
     *
     * @param in the java.io.Reader to read input from.
     */
    public Lexer(java.io.Reader in) {
        this.zzReader = in;
    }

    private static int[] zzUnpackcmap_top() {
        int[] result = new int[4352];
        int offset = 0;
        offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackcmap_top(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    private static int[] zzUnpackcmap_blocks() {
        int[] result = new int[512];
        int offset = 0;
        offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackcmap_blocks(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    private static int[] zzUnpackAction() {
        int[] result = new int[158];
        int offset = 0;
        offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAction(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    private static int[] zzUnpackRowMap() {
        int[] result = new int[158];
        int offset = 0;
        offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackRowMap(String packed, int offset, int[] result) {
        int i = 0;  /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int high = packed.charAt(i++) << 16;
            result[j++] = high | packed.charAt(i++);
        }
        return j;
    }

    private static int[] zzUnpackTrans() {
        int[] result = new int[4248];
        int offset = 0;
        offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackTrans(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            value--;
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    private static int[] zzUnpackAttribute() {
        int[] result = new int[158];
        int offset = 0;
        offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAttribute(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    /**
     * Translates raw input code points to DFA table row
     */
    private static int zzCMap(int input) {
        int offset = input & 255;
        return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
    }

    /**
     * Reports an error that occurred while scanning.
     *
     * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
     * match-all fallback rule) this method will only be called with things that
     * "Can't Possibly Happen".
     *
     * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
     * scanner etc.).
     *
     * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
     *
     * @param errorCode the code of the error message to display.
     */
    private static void zzScanError(int errorCode) {
        String message;
        try {
            message = ZZ_ERROR_MSG[errorCode];
        } catch (ArrayIndexOutOfBoundsException e) {
            message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
        }

        throw new Error(message);
    }

    public List<Token> getTokens() {
        return tokens;
    }

    public void setTokens(List<Token> tokens) {
        this.tokens = tokens;
    }

    public void addToken(Class<? extends Token> className, int row, int column, String content) {
        try {
            if (!isCommentLine) {
                Token token = className.getDeclaredConstructor(int.class, int.class, String.class).newInstance(row, column, content);
                tokens.add(token);
            }
        } catch (InstantiationException | IllegalAccessException | InvocationTargetException | NoSuchMethodException e) {
            e.printStackTrace();
        }
    }

    public void printIllegalCharacterError(int row, int column, String content) {
        throw new Error(String.format("Illegal character <%s> on row=%d; column=%d", content, row, column));
    }

    public void printIllegalIdentifierError(int row, int column, String content) {
        throw new Error(String.format("Illegal Identifier name <%s> on row=%d; column=%d. The name can't start with a digit.", content, row, column));
    }

    /**
     * Refills the input buffer.
     *
     * @return {@code false} iff there was new input.
     * @throws java.io.IOException if any I/O-Error occurs
     */
    private boolean zzRefill() throws java.io.IOException {

        /* first: make room (if you can) */
        if (zzStartRead > 0) {
            zzEndRead += zzFinalHighSurrogate;
            zzFinalHighSurrogate = 0;
            System.arraycopy(zzBuffer, zzStartRead,
                    zzBuffer, 0,
                    zzEndRead - zzStartRead);

            /* translate stored positions */
            zzEndRead -= zzStartRead;
            zzCurrentPos -= zzStartRead;
            zzMarkedPos -= zzStartRead;
            zzStartRead = 0;
        }

        /* is the buffer big enough? */
        if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
            /* if not: blow it up */
            char newBuffer[] = new char[zzBuffer.length * 2];
            System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
            zzBuffer = newBuffer;
            zzEndRead += zzFinalHighSurrogate;
            zzFinalHighSurrogate = 0;
        }

        /* fill the buffer with new input */
        int requested = zzBuffer.length - zzEndRead;
        int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

        /* not supposed to occur according to specification of java.io.Reader */
        if (numRead == 0) {
            throw new java.io.IOException(
                    "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
        }
        if (numRead > 0) {
            zzEndRead += numRead;
            if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
                if (numRead == requested) { // We requested too few chars to encode a full Unicode character
                    --zzEndRead;
                    zzFinalHighSurrogate = 1;
                } else {                    // There is room in the buffer for at least one more char
                    int c = zzReader.read();  // Expecting to read a paired low surrogate char
                    if (c == -1) {
                        return true;
                    } else {
                        zzBuffer[zzEndRead++] = (char) c;
                    }
                }
            }
            /* potentially more input available */
            return false;
        }

        /* numRead < 0 ==> end of stream */
        return true;
    }

    /**
     * Closes the input reader.
     *
     * @throws java.io.IOException if the reader could not be closed.
     */
    public final void yyclose() throws java.io.IOException {
        zzAtEOF = true; // indicate end of file
        zzEndRead = zzStartRead; // invalidate buffer

        if (zzReader != null) {
            zzReader.close();
        }
    }

    /**
     * Resets the scanner to read from a new input stream.
     *
     * <p>Does not close the old reader.
     *
     * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
     * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
     *
     * <p>Internal scan buffer is resized down to its initial length, if it has grown.
     *
     * @param reader The new input stream.
     */
    public final void yyreset(java.io.Reader reader) {
        zzReader = reader;
        zzEOFDone = false;
        yyResetPosition();
        zzLexicalState = YYINITIAL;
        if (zzBuffer.length > ZZ_BUFFERSIZE) {
            zzBuffer = new char[ZZ_BUFFERSIZE];
        }
    }

    /**
     * Resets the input position.
     */
    private final void yyResetPosition() {
        zzAtBOL = true;
        zzAtEOF = false;
        zzCurrentPos = 0;
        zzMarkedPos = 0;
        zzStartRead = 0;
        zzEndRead = 0;
        zzFinalHighSurrogate = 0;
        yyline = 0;
        yycolumn = 0;
        yychar = 0L;
    }

    /**
     * Returns whether the scanner has reached the end of the reader it reads from.
     *
     * @return whether the scanner has reached EOF.
     */
    public final boolean yyatEOF() {
        return zzAtEOF;
    }

    /**
     * Returns the current lexical state.
     *
     * @return the current lexical state.
     */
    public final int yystate() {
        return zzLexicalState;
    }

    /**
     * Enters a new lexical state.
     *
     * @param newState the new lexical state
     */
    public final void yybegin(int newState) {
        zzLexicalState = newState;
    }

    /**
     * Returns the text matched by the current regular expression.
     *
     * @return the matched text.
     */
    public final String yytext() {
        return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);
    }

    /**
     * Returns the character at the given position from the matched text.
     *
     * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
     *
     * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
     * @return the character at {@code position}.
     */
    public final char yycharat(int position) {
        return zzBuffer[zzStartRead + position];
    }

    /**
     * How many characters were matched.
     *
     * @return the length of the matched text region.
     */
    public final int yylength() {
        return zzMarkedPos - zzStartRead;
    }

    /**
     * Pushes the specified amount of characters back into the input stream.
     *
     * <p>They will be read again by then next call of the scanning method.
     *
     * @param number the number of characters to be read again. This number must not be greater than
     *               {@link #yylength()}.
     */
    public void yypushback(int number) {
        if (number > yylength())
            zzScanError(ZZ_PUSHBACK_2BIG);

        zzMarkedPos -= number;
    }


    /**
     * Resumes scanning until the next regular expression is matched, the end of input is encountered
     * or an I/O-Error occurs.
     *
     * @return the next token.
     * @throws java.io.IOException if any I/O-Error occurs.
     */
    public Token tokenize() throws java.io.IOException {
        int zzInput;
        int zzAction;

        // cached fields:
        int zzCurrentPosL;
        int zzMarkedPosL;
        int zzEndReadL = zzEndRead;
        char[] zzBufferL = zzBuffer;

        int[] zzTransL = ZZ_TRANS;
        int[] zzRowMapL = ZZ_ROWMAP;
        int[] zzAttrL = ZZ_ATTRIBUTE;

        while (true) {
            zzMarkedPosL = zzMarkedPos;

            boolean zzR = false;
            int zzCh;
            int zzCharCount;
            for (zzCurrentPosL = zzStartRead;
                 zzCurrentPosL < zzMarkedPosL;
                 zzCurrentPosL += zzCharCount) {
                zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
                zzCharCount = Character.charCount(zzCh);
                switch (zzCh) {
                    case '\u000B':  // fall through
                    case '\u000C':  // fall through
                    case '\u0085':  // fall through
                    case '\u2028':  // fall through
                    case '\u2029':
                        yyline++;
                        yycolumn = 0;
                        zzR = false;
                        break;
                    case '\r':
                        yyline++;
                        yycolumn = 0;
                        zzR = true;
                        break;
                    case '\n':
                        if (zzR)
                            zzR = false;
                        else {
                            yyline++;
                            yycolumn = 0;
                        }
                        break;
                    default:
                        zzR = false;
                        yycolumn += zzCharCount;
                }
            }

            if (zzR) {
                // peek one character ahead if it is
                // (if we have counted one line too much)
                boolean zzPeek;
                if (zzMarkedPosL < zzEndReadL)
                    zzPeek = zzBufferL[zzMarkedPosL] == '\n';
                else if (zzAtEOF)
                    zzPeek = false;
                else {
                    boolean eof = zzRefill();
                    zzEndReadL = zzEndRead;
                    zzMarkedPosL = zzMarkedPos;
                    zzBufferL = zzBuffer;
                    if (eof)
                        zzPeek = false;
                    else
                        zzPeek = zzBufferL[zzMarkedPosL] == '\n';
                }
                if (zzPeek) yyline--;
            }
            zzAction = -1;

            zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

            zzState = ZZ_LEXSTATE[zzLexicalState];

            // set up zzAction for empty match case:
            int zzAttributes = zzAttrL[zzState];
            if ((zzAttributes & 1) == 1) {
                zzAction = zzState;
            }


            zzForAction:
            {
                while (true) {

                    if (zzCurrentPosL < zzEndReadL) {
                        zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
                        zzCurrentPosL += Character.charCount(zzInput);
                    } else if (zzAtEOF) {
                        zzInput = YYEOF;
                        break zzForAction;
                    } else {
                        // store back cached positions
                        zzCurrentPos = zzCurrentPosL;
                        zzMarkedPos = zzMarkedPosL;
                        boolean eof = zzRefill();
                        // get translated positions and possibly new buffer
                        zzCurrentPosL = zzCurrentPos;
                        zzMarkedPosL = zzMarkedPos;
                        zzBufferL = zzBuffer;
                        zzEndReadL = zzEndRead;
                        if (eof) {
                            zzInput = YYEOF;
                            break zzForAction;
                        } else {
                            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
                            zzCurrentPosL += Character.charCount(zzInput);
                        }
                    }
                    int zzNext = zzTransL[zzRowMapL[zzState] + zzCMap(zzInput)];
                    if (zzNext == -1) break zzForAction;
                    zzState = zzNext;

                    zzAttributes = zzAttrL[zzState];
                    if ((zzAttributes & 1) == 1) {
                        zzAction = zzState;
                        zzMarkedPosL = zzCurrentPosL;
                        if ((zzAttributes & 8) == 8) break zzForAction;
                    }

                }
            }

            // store back cached position
            zzMarkedPos = zzMarkedPosL;

            if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
                zzAtEOF = true;
                return null;
            } else {
                switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
                    case 1: {
                        printIllegalCharacterError(yyline, yycolumn, yytext());
                    }
                    // fall through
                    case 47:
                        break;
                    case 2: {
                    }
                    // fall through
                    case 48:
                        break;
                    case 3: {
                        isCommentLine = false;
                    }
                    // fall through
                    case 49:
                        break;
                    case 4: {
                        addToken(QuoteShortToken.class, yyline, yycolumn, yytext());
                    }
                    // fall through
                    case 50:
                        break;
                    case 5: {
                        addToken(OpenParenthesisToken.class, yyline, yycolumn, yytext());
                    }
                    // fall through
                    case 51:
                        break;
                    case 6: {
                        addToken(CloseParenthesisToken.class, yyline, yycolumn, yytext());
                    }
                    // fall through
                    case 52:
                        break;
                    case 7: {
                        addToken(IntegerNumberLiteralToken.class, yyline, yycolumn, yytext());
                    }
                    // fall through
                    case 53:
                        break;
                    case 8: {
                        isCommentLine = true;
                    }
                    // fall through
                    case 54:
                        break;
                    case 9: {
                        addToken(IdentifierToken.class, yyline, yycolumn, yytext());
                    }
                    // fall through
                    case 55:
                        break;
                    case 10: {
                        printIllegalIdentifierError(yyline, yycolumn, yytext());
                    }
                    // fall through
                    case 56:
                        break;
                    case 11: {
                        addToken(OrToken.class, yyline, yycolumn, yytext());
                    }
                    // fall through
                    case 57:
                        break;
                    case 12: {
                        addToken(RealNumberLiteralToken.class, yyline, yycolumn, yytext());
                    }
                    // fall through
                    case 58:
                        break;
                    case 13: {
                        addToken(AndToken.class, yyline, yycolumn, yytext());
                    }
                    // fall through
                    case 59:
                        break;
                    case 14: {
                        addToken(NotToken.class, yyline, yycolumn, yytext());
                    }
                    // fall through
                    case 60:
                        break;
                    case 15: {
                        addToken(XorToken.class, yyline, yycolumn, yytext());
                    }
                    // fall through
                    case 61:
                        break;
                    case 16: {
                        addToken(CondToken.class, yyline, yycolumn, yytext());
                    }
                    // fall through
                    case 62:
                        break;
                    case 17: {
                        addToken(ConsToken.class, yyline, yycolumn, yytext());
                    }
                    // fall through
                    case 63:
                        break;
                    case 18: {
                        addToken(EvalToken.class, yyline, yycolumn, yytext());
                    }
                    // fall through
                    case 64:
                        break;
                    case 19: {
                        addToken(FuncToken.class, yyline, yycolumn, yytext());
                    }
                    // fall through
                    case 65:
                        break;
                    case 20: {
                        addToken(HeadToken.class, yyline, yycolumn, yytext());
                    }
                    // fall through
                    case 66:
                        break;
                    case 21: {
                        addToken(LessToken.class, yyline, yycolumn, yytext());
                    }
                    // fall through
                    case 67:
                        break;
                    case 22: {
                        addToken(NullLiteralToken.class, yyline, yycolumn, yytext());
                    }
                    // fall through
                    case 68:
                        break;
                    case 23: {
                        addToken(PlusToken.class, yyline, yycolumn, yytext());
                    }
                    // fall through
                    case 69:
                        break;
                    case 24: {
                        addToken(ProgToken.class, yyline, yycolumn, yytext());
                    }
                    // fall through
                    case 70:
                        break;
                    case 25: {
                        addToken(SetQToken.class, yyline, yycolumn, yytext());
                    }
                    // fall through
                    case 71:
                        break;
                    case 26: {
                        addToken(TailToken.class, yyline, yycolumn, yytext());
                    }
                    // fall through
                    case 72:
                        break;
                    case 27: {
                        addToken(BooleanLiteralToken.class, yyline, yycolumn, yytext());
                    }
                    // fall through
                    case 73:
                        break;
                    case 28: {
                        addToken(BreakToken.class, yyline, yycolumn, yytext());
                    }
                    // fall through
                    case 74:
                        break;
                    case 29: {
                        addToken(EqualToken.class, yyline, yycolumn, yytext());
                    }
                    // fall through
                    case 75:
                        break;
                    case 30: {
                        addToken(IsIntToken.class, yyline, yycolumn, yytext());
                    }
                    // fall through
                    case 76:
                        break;
                    case 31: {
                        addToken(MinusToken.class, yyline, yycolumn, yytext());
                    }
                    // fall through
                    case 77:
                        break;
                    case 32: {
                        addToken(QuoteToken.class, yyline, yycolumn, yytext());
                    }
                    // fall through
                    case 78:
                        break;
                    case 33: {
                        addToken(TimesToken.class, yyline, yycolumn, yytext());
                    }
                    // fall through
                    case 79:
                        break;
                    case 34: {
                        addToken(WhileToken.class, yyline, yycolumn, yytext());
                    }
                    // fall through
                    case 80:
                        break;
                    case 35: {
                        addToken(DivideToken.class, yyline, yycolumn, yytext());
                    }
                    // fall through
                    case 81:
                        break;
                    case 36: {
                        addToken(IsAtomToken.class, yyline, yycolumn, yytext());
                    }
                    // fall through
                    case 82:
                        break;
                    case 37: {
                        addToken(IsBoolToken.class, yyline, yycolumn, yytext());
                    }
                    // fall through
                    case 83:
                        break;
                    case 38: {
                        addToken(IsListToken.class, yyline, yycolumn, yytext());
                    }
                    // fall through
                    case 84:
                        break;
                    case 39: {
                        addToken(IsNullToken.class, yyline, yycolumn, yytext());
                    }
                    // fall through
                    case 85:
                        break;
                    case 40: {
                        addToken(IsRealToken.class, yyline, yycolumn, yytext());
                    }
                    // fall through
                    case 86:
                        break;
                    case 41: {
                        addToken(LambdaToken.class, yyline, yycolumn, yytext());
                    }
                    // fall through
                    case 87:
                        break;
                    case 42: {
                        addToken(LessEqToken.class, yyline, yycolumn, yytext());
                    }
                    // fall through
                    case 88:
                        break;
                    case 43: {
                        addToken(ReturnToken.class, yyline, yycolumn, yytext());
                    }
                    // fall through
                    case 89:
                        break;
                    case 44: {
                        addToken(GreaterToken.class, yyline, yycolumn, yytext());
                    }
                    // fall through
                    case 90:
                        break;
                    case 45: {
                        addToken(NonEqualToken.class, yyline, yycolumn, yytext());
                    }
                    // fall through
                    case 91:
                        break;
                    case 46: {
                        addToken(GreaterEqToken.class, yyline, yycolumn, yytext());
                    }
                    // fall through
                    case 92:
                        break;
                    default:
                        zzScanError(ZZ_NO_MATCH);
                }
            }
        }
    }


}
